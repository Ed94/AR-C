Engine.Timing.source


static : Timing : TimingData ;


alias : Clock : Platform:: HResClock ;


pub fn :

GetContext -> ref<TimingData> : -> Timing ;

Update : 
{
	in Timing :
		TicksElapsed = Snapshot.End - Snapshot.Start;

		stack : intermediary : mut u64 = TicksElapsed * TicksToMicroSecs ;

		Microseconds = cast<f64>(intermediary);

		intermediary  = cast<f64>(Snapshot.Frequency);
		Microseconds /= intermediary;

		intermediary  = cast<f64>(TicksElapsed);
		DeltaTime     = intermediary;
		intermediary  = cast<f64>(MicrosecondToSecond);
		DeltaTime    /= intermediary;	
	;

	Renderer:: ProcessTiming();
};

(TakeSnapshot) :
{
	Start : Clock.Now(Timing.Snapshot.Start) ;
	End   : Clock.Now(Timing.Snapshot.End  ) ;
};


// This alias definition is restrictd to this pub fn: scope
alias :
{	// This is overloading the default floating point operator 
	// with one that takes into account float accuracy to the epsilon.
	// f64.epsilon is a member defined by SL::Numerics.
	f64.>= : SL:: Numerics:: f64.>=(f64.epsilon);
	f64.<= : SL:: Numerics:: f64.<=(f64.epsilon);
};

(self : ref<Timer>) :
{

	Ended -> bool :
	{
		stack : result : mut f64 = 0.0 ;

		result = Elapsed >= EndTime ;

	-> result
	};
};

(self : ref<mut Timer>) :
{
	Reset : Elapsed = 0.0 ;

	Tick :
	{
		if DeltaTime <= 0.000001 :
			Elapsed = Elapsed + 0.000001 ;
		;
		else :
			Elapsed = Elapsed + Deltatime ;
		;
	};
};
;