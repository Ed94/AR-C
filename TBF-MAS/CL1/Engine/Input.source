Engine.Input.source


static : InputData : mut DataContext ;


GetDataContext : -> InputData ;


Update :

	in InputData.SignalStates :

		Previous = Current
	;

	loop :
	{
		stack : index : uDM = 0 ;

		if index == NumKeysTracked : break;

		stack : 
			keyCode : EKeyCode = KeySignals:: KeyCodeAtIndex(index)
		;

		ct :
			current  : ref<InputData.SignalStates.Current >
			previous : cref<InputData.SignalStates.Previous>
		;

		current[index] = Platform:: GetKeySignal(keyCode)

		stack :
			currentState : ct ref<EState> = InputData.KeyStates[index]
			latestState  : EState         = EState:: None
		;

		if current[index] == previous[index] :
			
			if      current[index] == true          : latestState = EState:: Held;
			else:if currentState   != EState:: Held : latestState = EState:: None;;
		;
		else 
			
			if   current[index] == false : latestState = EState:: Released;
			else                         : latestState = EState:: Pressed ;
		;

		if lastestState != currentState :

			currentState = latestState

			stack : subIndex : uDM = 0 ;

			loop :

				if subIndex == KeyEventSubs[index].Num : break ;

				ct : sub : KeyEventCallbackPtr = KeyEventSubs[index].Array[subIndex] ;

				if sub != KeyEventCallbackPtr:: null : sub.val ;

				subIndex++
			;
		;

		index++
	};
;


Subscribe (_key : EkeyCode, _callback : ref<KeyEventCallback>) :
{
	stack : 
		index    : uDM                   = KeySignals:: IndexFromKeyCode(_key)
		subs     : ct ref<Subscriptions> = InputData.KeyEventSubs[index]
		subIndex : uDM                   = 0
	;

	if subs.Num == 0 : 
		
		heap : allocate(1) : subs.Array ;

		subs.Num++
	;

	else :
	{
		loop :
		{
			if subIndex == subs.Num : break ;

			if _callback.ptr == subs.Array[subIndex] : 

				if sub == null : sub = _callback.ptr ;

				ret
			;
		};

		newSize : uDM  = subs.Num + 1;
		result  : bool = heap : reallocate(newSize) : subs.Array

		if  result != false : subs.Num++;
		else                : Debug:: HandleError("Failed to globally reallocate sub array.") ;
	};

	index             = subs.Num - 1
	subs.Array[index] = _callback.ptr
};

Unsubscribe (_key : EkeyCode, _callback : ref<KeyEventCallback>) :

	stack :
		index    : uDM                   = KeySignals:: IndexFromKeyCode(_key)
		subs     : ct ref<Subscriptions> = InputData.KeyEventSubs[index]
		subIndex : uDM                   = 0
	;

	loop:
	{
		if subIndex == KeyEventSubs[index].Array[subIndex] :

			if sub == _callback.ptr : sub = null ;

			ret
		;
	};
;

KeyCodeAtIndex (_index : uDM) -> EkeyCode :
	
	switch index :
	
		case 0: -> EKeyCode:: Arrow_Up
		case 1: -> EKeyCode:: Arrow_Down
		case 2: -> EKeyCode:: Arrow_Left
		case 3: -> EKeyCode:: Arrow_Right
		case 4: -> EKeyCode:: Enter
		case 5: -> EKeyCode:: Tab
	;

-> EKeyCode:: None
;

IndexFromKeyCode (_key   : EKeyCode) -> uDM :
	
	switch _index :

		case EKeyCode:: Arrow_Up   : -> 0
		case EKeyCode:: Arrow_Down : -> 1
		case EKeyCode:: Arrow_Left : -> 2
		case EKeyCode:: Arrow_Right: -> 3
		case EKeyCode:: Enter      : -> 4
		case EKeyCode:: Tab        : -> 5
	;

-> SL:: NumLimit<uDM>:: Max()
;
