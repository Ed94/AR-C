Engine.State.Intro.source


alias :
Timer : Timing:: Timer;
;


static :

	IntroState : mut State::State ;

	IntroTimer,
	Timer_TillTitle,
	Timer_TillVersion,
	Timer_TillIntroFadeToGrey,
	Timer_TillTitle_ToWhite,
	Timer_TillVersion_ToWhite,
	Timer_Till_FadeOut
	: mut Timer;

	Intro_DoneOnce : mut bool = false;

	ct : 
	IntroTitle    : WCStr = "Trial By Fire Engine",
	EngineVersion         = "Type C Phase 14"      ;
	;

	RenderTitle, 
	RenderVersion 
	: mut bool = false ;

	IntroTitle_RenderCells, 
	Version_RenderCells
	: mut ArrayD<Cell>;
;



fn :

	ChangeTitleTo_Grey :
	{
		stack : cellIndex : uDM = 0; ;

		loop : if cellIndex < IntroTitle_RenderCell.Num : break ;

			IntroTitle_RenderCells[cellIndex].Attributes = ECellAttributeFlag::FG_Red;

			cellIndex++;
		;
	};

	void ChangeEngineVerTo_Grey()
	{
		for (size_t cellIndex = 0; cellIndex < EngineVersion_Length; cellIndex++)
		{
			Version_RenderCells[cellIndex].Attributes = FOREGROUND_INTENSITY;
		}
	}

	void ChangeTitleTo_White()
	{
		for (size_t cellIndex = 0; cellIndex < Title_Length; cellIndex++)
		{
			IntroTitle_RenderCells[cellIndex].Attributes = Console_WhiteCell;
		}
	}

	void ChangeEngineVerTo_White()
	{
		for (size_t cellIndex = 0; cellIndex < EngineVersion_Length; cellIndex++)
		{
			Version_RenderCells[cellIndex].Attributes = Console_WhiteCell;
		}
	}


	// Class Public

	void IntroState_Load(void)
	{
		Renderer_WriteToLog(L"Intro State: Loaded");

		if (! Intro_DoneOnce)
		{
			IntroTimer.EndTime = 7.0L;

			Timer_TillTitle    .EndTime = 2.0;
			Timer_TillVersion  .EndTime = 1.2;

			Timer_TillIntroFadeToGrey.EndTime = Timer_TillTitle.EndTime + 4.2;

			Timer_Till_FadeOut.EndTime = 0.134;

			Timer_TillTitle_ToWhite  .EndTime = 0.134;
			Timer_TillVersion_ToWhite.EndTime = 0.134;

			Title_Length         = wcslen(IntroTitle);
			EngineVersion_Length = wcslen(EngineVersion) + 1;

			IntroTitle_RenderCells = GlobalAllocate(Cell, Title_Length        );
			Version_RenderCells    = GlobalAllocate(Cell, EngineVersion_Length);

			for (size_t cellIndex = 0; cellIndex < Title_Length; cellIndex++)
			{
				IntroTitle_RenderCells[cellIndex].Char.UnicodeChar = IntroTitle[cellIndex];
			}

			for (size_t cellIndex = 0; cellIndex < EngineVersion_Length; cellIndex++)
			{
				Version_RenderCells[cellIndex].Char.UnicodeChar = EngineVersion[cellIndex];
			}

			Intro_DoneOnce = true;
		}
		
		ChangeTitleTo_Grey();

		ChangeEngineVerTo_Grey();
	}

	void IntroState_Unload(void)
	{
		Renderer_WriteToLog(L"Intro State: Unloaded");
	}

	void IntroState_Update(void)
	{
		static bool 
			LogTitle   = true, 
			LogVersion = true, 
			LogFade    = true, 
			LogEnd     = true,

			Log_ChangeToWhite_Title   = true,
			Log_ChangeToWhite_Version = true,

			Log_FadeToGrey = true;


		Timer_Tick(&IntroTimer);

		Timer_Tick(&Timer_TillTitle);

		Renderer_WriteToPersistentSection(4, L"Intro Time Elapsed: %.7Lf", IntroTimer.Elapsed);

		if (Timer_Ended(&Timer_TillTitle))
		{
			if (LogTitle)
			{
				Renderer_WriteToLog(L"Title should show up now (Grey).");

				RenderTitle = true;

				LogTitle = false;
			}

			Timer_Tick(&Timer_TillTitle_ToWhite);

			if (Log_ChangeToWhite_Title &&  Timer_Ended(&Timer_TillTitle_ToWhite))
			{
				ChangeTitleTo_White();

				Renderer_WriteToLog(L"Title: White attribute set.");

				Log_ChangeToWhite_Title = false;
			}

			Timer_Tick(&Timer_TillVersion);

			if (LogVersion && Timer_Ended(&Timer_TillVersion))
			{
				Renderer_WriteToLog(L"Version should show up now.");

				RenderVersion = true;

				LogVersion = false;
			}

			if (RenderVersion)
			{
				Timer_Tick(&Timer_TillVersion_ToWhite);

				if (Log_ChangeToWhite_Version && Timer_Ended(&Timer_TillVersion_ToWhite))
				{
					ChangeEngineVerTo_White();

					Renderer_WriteToLog(L"Engine Version: White attribute set.");

					Log_ChangeToWhite_Version = false;
				}
			}
		}

		Timer_Tick(&Timer_TillIntroFadeToGrey);

		if (Timer_Ended(&Timer_TillIntroFadeToGrey))
		{
			ChangeTitleTo_Grey();

			ChangeEngineVerTo_Grey();

			if (Log_FadeToGrey)
			{
				Renderer_WriteToLog(L"Title should fade to grey now.");

				Log_FadeToGrey = false;
			}

			Timer_Tick(&Timer_Till_FadeOut);

			if (LogFade && Timer_Ended(&Timer_Till_FadeOut))
			{
				Renderer_WriteToLog(L"Title should fade out now.");

				RenderTitle   = false;
				RenderVersion = false;

				LogFade = false;
			}
		}

		if (LogEnd && Timer_Ended(&IntroTimer) )
		{
			Renderer_WriteToLog(L"Intro Ends now.");

			LogEnd = false;

			State_LoadGame();
		}
	}

	void IntroState_Render(void)
	{
		static COORD
			startingCell = { 0, 9 },
			endingCell   = { 0, 9 };

		// Render Title
		if (RenderTitle)
		{
			startingCell.X = (Renderer_Width / 2) - ((uInt16)Title_Length / 2);
			endingCell  .X = (Renderer_Width / 2) + ((uInt16)Title_Length / 2);

			startingCell.Y = 9;
			endingCell  .Y = 9;

			Renderer_WriteToBufferCells(IntroTitle_RenderCells, startingCell, endingCell);
		}

		// Render Version
		if (RenderVersion)
		{
			startingCell.X = (Renderer_Width / 2) - ((uInt16)EngineVersion_Length / 2);
			endingCell  .X = (Renderer_Width / 2) + ((uInt16)EngineVersion_Length / 2);

			startingCell.Y = 11;
			endingCell  .Y = 11;

			Renderer_WriteToBufferCells(Version_RenderCells, startingCell, endingCell);
		}
	}



	pub :
	{
		GetIntroState(void) :
			-> IntroState;
		;
	};
;



// Occurs when the program is loaded before executing the entrypoint.
Handler:: OnLoad :

	IntroState.rLoad   = IntroState_Load  .ptr;
	IntroState.rUnload = IntroState_Unload.ptr;
	IntroState.rUpdate = IntroState_Update.ptr;
	IntroState.rRender = IntroState_Render.ptr;
;