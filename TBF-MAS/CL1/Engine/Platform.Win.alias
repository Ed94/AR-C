Engine.Platform_Win.alias

Handler : MAS:: Handler;

C : Handler:: Foreign:: C;

LocateHeader : C:: LocateHeader;
CLibrary     : C:: Library;

ConIO          : CLibrary = LocateHeader("conio.h");
ConsoleAPI2    : CLibrary = LocateHeader("consoleapi2.h");
CoreCRT        : CLibrary = LocateHeader("corecrt.h");
CoreCRT_WSTDIO : CLibrary = LocateHeader("corecrt_wstdio.h");
HandleAPI      : CLibrary = LocateHeader("handleapi.h");
MinWinDef      : CLibrary = LocateHeader("minwindef.h");
ProcessEnv     : CLibrary = LocateHeader("processenv.h");
STDIO          : CLibrary = LocateHeader("stdio.h");
WinBase        : CLibrary = LocateHeader("winbase.h");
WinConTypes    : CLibrary = LocateHeader("wincontypes.h");
WinDef         : CLibrary = LocateHeader("windef.h");
WinNT          : CLibrary = LocateHeader("winNT.h");
WinUser        : CLibrary = Locateheader("winuser.h");
Windows        : CLibrary = LocateHeader("windows.h");

DWORD : ConIO.Typedef_ToBultin("DWORD");

Handle : WinNT:: HANDLE;

(Handle) :
	Window : WinDef:: HWND;
;

(StdHandle) :
	ct :
		Input   : WinBase  :: Macro:: Translate("STD_INPUT_HANDLE");
		Output  : WinBase  :: Macro:: Translate("STD_OUTPUT_HANDLE");
		Error   : WinBase  :: Macro:: Translate("STD_ERROR_HANDLE");
		Invalid : HandleAPI:: Macro:: Translate("INVALID_HANDLE_VALUE");
	;

	fn : Get : ProcessEnv:: Fn:: Translate("GetStdHandle"); ;
;

(Console) : 

	Coord : WinConTypes:: COORD;

	SmallRect : WinConTypes:: SMALL_RECT;

	ScreenBufferInfo : ConsoleAPI2:: Struct:: Define("CONSOLE_SCREEN_BUFFER_INFO") :
	{	
		Size           : dwSize;
		CursorPosition : dwCursorPosition;
		Attributes     : wAttributes;
		Window         : srWindow;
		MaxWinSize     : dwMaximumWindowSize;
	};

	Cell : ConsoleAPI2:: Struct:: Define("CHAR_INFO") :
	{
		Char : union :
			Utf   : Unicode,
			Ascii : AsciiChar
		;

		Attributes : Attributes;
	};

	ct (FileName) :
	{
		In   : [] char8s = "CONIN$";
		Out  : [] char8s = "CONOUT$";
		Null : [] char8s = "NUL:";
		
	};

	ct (Stream) :
	{
		In  : CoreCRT_WSTDIO:: Macro:: Translate("stdin");
		Out : CoreCRT_WSTDIO:: Macro:: Translate("stdout");
		Err : CoreCRT_WSTDIO:: Macro:: Translate("stderr");
	};

	ct (Cursor) :
	{
		MinSize    : MinWinDef:: DWORD = 1;
		NonVisible : bool              = 0;
	};
;

File : CoreCRT_WSTDIO:: Type:: Translate("FILE");

(File) :
	ct (Access) :
		Read  : char8s = 'r';
		Write : char8s = 'w';
	;

	ct (BufferMode) :
		Full     : STDIO:: Macro:: Translate("_IOFBF");
		Line     : STDIO:: Macro:: Translate("_IOLBF");
		NoBuffer : STDIO:: Macro:: Translate("_IONBF");
	;

	fn :
		ReassignPtr : STDIO:: Fn:: Translate("freopen_s");
		SetBuffer   : STDIO:: Fn:: Translate("setvbuf");
	;
;

EVirtualKey : enum<u16> :
	None  : = 0x00
	Up    : WinUser:: Macro:: Translate("VK_UP");
	Down  : WinUser:: Macro:: Translate("VK_DOWN");
	Left  : WinUser:: Macro:: Translate("VK_LEFT");
	Right : WinUser:: Macro:: Translate("VK_RIGHT");
	Enter : WinUser:: Macro:: Translate("VK_RETURN");
	Tab   : WinUser:: Macro:: Translate("VK_TAB");
;

ECellAttributeFlag : enum<u16> :

	(FG) :
	Red       : ConsoleAPI2:: Macro:: Translate("FOREGROUND_RED");
	Green     : ConsoleAPI2:: Macro:: Translate("FOREGROUND_GREEN");
	Blue      : ConsoleAPI2:: Macro:: Translate("FOREGROUND_BLUE");
	Intensity : ConsoleAPI2:: Macro:: Translate("FOREGROUND_INTENSITY");
	;

	(BG) :
	Red       : ConsoleAPI2:: Macro:: Translate("BACKGROUND_RED");
	Green     : ConsoleAPI2:: Macro:: Translate("BACKGROUND_GREEN");
	Blue      : ConsoleAPI2:: Macro:: Translate("BACKGROUND_BLUE");
	Intensity : ConsoleAPI2:: Macro:: Translate("BACKGROUND_INTENSITY");
	;
;

PStr       : WinNT:: Macro:: Translate("PSTR");
InstHandle : WinNT:: Macro:: Translate("HINSTANCE");
ErrorNo    : CoreCRT:: Type:: Translate("errno_t");

fn : 

	GetAsyncKeyState : WinUser:: Fn :: Translate("GetAsyncKeyState");

	Handler:: Entrypoint : 
	{
		WinMain
		(
			hInstance     : InstHandle, 
			hPrevInstance : InstHandle, 
			pCmdLine      : PStr, 
			nCmdShow      : s32
		)
		-> s32
	};
;


Handler:: ExternallyLinked :
ConIO,
ConsoleAPI2,
CoreCRT_WSTDIO,
HandleAPI,
MinWinDef,
ProcessEnv,
STDIO,
WinBase,
WinNT,
WinUser,
Windows
;