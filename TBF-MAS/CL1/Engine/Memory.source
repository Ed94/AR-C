Engine.Memory.source


static : GlobalMemory : BlockArray ;


fn :

	(self : ref<mut BlockArray>) :
	{
		Add -> ref<mut Block> :

			if Array == null :

				heap : allocate() : Array ;

				if Array == null : Debug:: HandleError("Failed to globally allocate block array.") ;

				Length = 1
			;
			else :
			{
				stack :
					newSize  : u32        = Length + 1
					newBlock : ptr<Block> = null
				;

				bool = heap : allocate(newSize) : newBlock ;

				if newBlock != null :

					FormatWithData(newBlock, Array, Length)  

					Array = newBlock
				;
				else :
					Debug:: HandleError("Failed to globally reallocate block array.") ;
				;
			};

			heap : allocate() : Array[Length - 1] ;

		-> Array[Length - 1]
		;
	};
;

pub fn heap :

	(self : ref<mut BlockArray>) :
	{
		<Type, indir = ptr> :

			allocate(_numToAllocate : uDM) -> indir<mut Type> :
			{
				stack : newBlock : ptr<mut Block> = Add() ;

				newBlock.Size = _numToAllocate
				
				heap : allocate<Type>(_numToAllocate) : newBlock.Locaiton ;

				if newBlock.Location == null : 
				-> newBlock.Location
				;
				else : 
					Debug:: HandleError("Failed to scope allocate memory.") 
				;
			};

			reallocate(_address : indir<Type>, _numDesired : u32) -> indir<mut Type> :
			{
				stack : index : mut uDM = 0 ;

				loop : if index == Length : break ;
				
					if Array[index].Location == _address :
					{
						stack : newLocation           : ptr<mut Type> = null ;
						heap  : allocate(_numDesired) : newLocation          ;

						if newLocation != null :

							heap : deallocate : Array[index].Location ;

							Array[index].Location = newLocation

						-> Array[index].Location
						;
					};
				;
			};
		;

		deallocate :

			stack : index : mut uDM = 0 ;

			loop : if index == Length : break ;
			{
				heap :
					deallocate : Array[index].Location
					deallocate ; Array[index]
				;
			};

			heap : deallocate : Array ;
		;
	};

	(Global) : 
	{
		<Type, indir = ptr> :

			allocate(_numToAllocate : uDM) -> indir<Type> :
			{
				stack : allocedMemory                            : ptr<mut Type> = null ;
				heap  : GlobalMemory.allocate(_numberToAllocate) : allocedMemory        ;

				if allocMemory != null : 
				-> allocMemory
				;
				else :
					Debug:: HandleError("Failed to globally allocate memory.") 
				;
			};

			reallocate(_address : indir<Type>, _numDesired : uDM) -> indir<Type> :
			{
				stack : index : uDM = 0 ;

				loop : if index == GlobalMemory.Length : -> null ;
				
					if GlobalMemory.Array[index].Location == _address :
					{
						stack : reallocedMemory                                : ptr<mut Type> = null ;
						heap  : GlobalMemory.reallocate(_address, _numDesired) : reallocMemory        ;

						if reallocedMemory != null : -> reallocedMemory ;
						else                       : -> null            ;
					};
				;
			};
		;

		deallocate : heap : deallocate() : GlobalMemory ; ;
	};
;