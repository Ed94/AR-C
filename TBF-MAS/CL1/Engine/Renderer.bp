Engine.Renderer.source



ct :
	Width  : uDM = 80;

	Borderline : uDM = 24;

	if  Debug :
	{
		(Debug) :
			Start   : uDM = 25;
			LogSize : uDM = 18;

			PersistentStart       : uDM = 44;
			PersistentSectionSize : uDM = 4;
		;

		Height : uDM = 80;
	}
	else :
		Height : uDM = 24;
	;

	GameEnd : uDM = 23;
;

alias :
Cell : Platform:: Cell;
Line : ArrayS<Cell, Width>;
;

struct Vec2D_Int_Def { sInt X, Y; };

Data : struct :
	WindowHandle : Handle:: Window;
	OutputHandle : Handle;

	CharactersWritten : u32;
	CoordSize         : Console:: Coord;
	ScreenBuffer      : ScreenBufferInfo;
	BufferSize        : u32;
	RectSize          : SmallRect;

	CONSOLE_CURSOR_INFO CursorSettings;

	Vec2D_Int ScreenPosition;

	TimerData RefreshTimer;
;

struct ScreenInfo_Def
{
	Vec2D_Int Center;
};



// Constants

#define SizeOf_Renderer \
	sizeof(RendererData)



// Functions

void Renderer_Clear(void);

bool Renderer_FillCellsWithWhitespace(void);

bool Renderer_FormatCells(void);

const RendererData* Renderer_GetContext(void);

void Renderer_LoadModule(void);

void Renderer_ProcessTiming(float64 _deltaTime);

void Renderer_RenderFrame(void);

void Renderer_ResetDrawPosition(void);

void Renderer_UnloadModule(void);

void Renderer_Update(void);

void Renderer_WriteToBufferCells(const Cell* _cells, COORD _initalCell, COORD _finalCell);

void Renderer_WriteToLog(const WideChar* _logString);

void Renderer_WriteToPersistentSection(sInt _row, const WideChar* _lineformat, ...);

void Renderer_Logs_ScrollUp(void);

void Renderer_Logs_ScrollDown(void);



